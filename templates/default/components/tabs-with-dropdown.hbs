{{!--
  Reusable Tabs Component with Dropdown Support

  Usage:
  {{> components/tabs-with-dropdown tabs=tabList active="kills"}}

  Where tabList is an array of objects with:
  - id: string (unique identifier)
  - label: string (display text)
  - url: string (link href, optional if has dropdown)
  - dropdown: array (optional, list of dropdown items)
    - label: string (display text)
    - url: string (link href)
--}}
<nav class="tabs">
  {{#each tabs}}
    {{#if this.dropdown}}
      <div class="tabs__dropdown-container">
        <button class="tabs__link tabs__dropdown-trigger {{#ifEquals this.id ../active}}tabs__link--active{{/ifEquals}}" data-dropdown-id="{{this.id}}">
          {{this.label}}
          <svg class="tabs__dropdown-icon" width="10" height="6" viewBox="0 0 10 6" fill="currentColor">
            <path d="M5 6L0 0h10L5 6z"/>
          </svg>
        </button>
        <div class="tabs__dropdown-menu" data-dropdown-menu="{{this.id}}">
          {{#each this.dropdown}}
            <a href="{{this.url}}" class="tabs__dropdown-item">{{this.label}}</a>
          {{/each}}
        </div>
      </div>
    {{else}}
      <a href="{{this.url}}" class="tabs__link {{#ifEquals this.id ../active}}tabs__link--active{{/ifEquals}}">
        {{this.label}}
      </a>
    {{/if}}
  {{/each}}
</nav>

<style>
.tabs {
  display: flex;
  gap: 0;
  background: var(--color-bg-tertiary);
  border: 1px solid var(--color-border-dark);
  border-radius: 4px;
  margin-bottom: 20px;
  overflow: visible;
  position: relative;
}

.tabs__link {
  flex: 1;
  padding: 12px 16px;
  background: rgba(0, 0, 0, 0.2);
  border-right: 1px solid var(--color-border-dark);
  color: var(--color-text-secondary);
  text-decoration: none;
  font-size: 11px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: all 0.2s ease;
  text-align: center;
  border: none;
  cursor: pointer;
  font-family: inherit;
}

.tabs__link:last-child {
  border-right: none;
}

.tabs__link:hover {
  background: rgba(74, 158, 255, 0.15);
  color: #4a9eff;
}

.tabs__link--active {
  background: rgba(74, 158, 255, 0.2);
  color: #4a9eff;
  border-bottom: 2px solid #4a9eff;
  position: relative;
  margin-bottom: -1px;
  padding-bottom: 11px;
}

.tabs__dropdown-container {
  flex: 1;
  position: relative;
  border-right: 1px solid var(--color-border-dark);
}

.tabs__dropdown-container:last-child {
  border-right: none;
}

.tabs__dropdown-trigger {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
}

.tabs__dropdown-icon {
  transition: transform 0.2s ease;
}

.tabs__dropdown-trigger:hover .tabs__dropdown-icon,
.tabs__dropdown-trigger.open .tabs__dropdown-icon {
  transform: rotate(180deg);
}

.tabs__dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: var(--color-bg-secondary);
  border: 1px solid var(--color-border-dark);
  border-top: none;
  border-radius: 0 0 4px 4px;
  display: none;
  flex-direction: column;
  z-index: 1000;
  margin-top: 0;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}

.tabs__dropdown-menu.open {
  display: flex;
}

.tabs__dropdown-item {
  padding: 12px 16px;
  color: var(--color-text-secondary);
  text-decoration: none;
  font-size: 11px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: all 0.2s ease;
  border-bottom: 1px solid var(--color-border-dark);
}

.tabs__dropdown-item:last-child {
  border-bottom: none;
}

.tabs__dropdown-item:hover {
  background: rgba(74, 158, 255, 0.15);
  color: #4a9eff;
}
</style>

<script>
(function() {
  // Toggle dropdown on click
  document.addEventListener('click', function(e) {
    const trigger = e.target.closest('.tabs__dropdown-trigger');

    if (trigger) {
      e.preventDefault();
      const dropdownId = trigger.dataset.dropdownId;
      const menu = document.querySelector(`[data-dropdown-menu="${dropdownId}"]`);

      // Close all other dropdowns
      document.querySelectorAll('.tabs__dropdown-menu.open').forEach(function(m) {
        if (m !== menu) {
          m.classList.remove('open');
          const otherId = m.dataset.dropdownMenu;
          const otherTrigger = document.querySelector(`[data-dropdown-id="${otherId}"]`);
          if (otherTrigger) otherTrigger.classList.remove('open');
        }
      });

      // Toggle current dropdown
      menu.classList.toggle('open');
      trigger.classList.toggle('open');
    } else {
      // Close all dropdowns when clicking outside
      document.querySelectorAll('.tabs__dropdown-menu.open').forEach(function(menu) {
        menu.classList.remove('open');
        const dropdownId = menu.dataset.dropdownMenu;
        const trigger = document.querySelector(`[data-dropdown-id="${dropdownId}"]`);
        if (trigger) trigger.classList.remove('open');
      });
    }
  });
})();
</script>
